---
title: "Ch 4"
output: html_document
date: "2022-10-25"
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## R Markdown

This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.

When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:


```{r Dist Function with Thermogram, echo = FALSE}

library(SoilR)
library(dplyr)
library(FME)
library(zoo)
library(ggplot2)

 ### Age System RDC distributions
  SystemRDC <- function(A,
                        u,
                        nyears,
                        yrobs,
                        C14atm,
                        C14YearAD,
                        h = 0.1) {
    year.ad <- seq(yrobs, (yrobs - nyears), by = -h)
    age <- seq((yrobs - yrobs), nyears, by = h)
    xss <- -1 * solve(A) %*% u
    SAMD <- sum(xss) * (systemAge(A, u, a = age)$systemAgeDensity) #system age mass density
    splineC14curve <- splinefun(x = C14YearAD, y = C14atm)
    newResC14curve <- splineC14curve(year.ad)
    D14C.decay <- ((((newResC14curve / 1000) + 1) * exp((-1 / 8267) * age)) - 1) * 1000
    return(data.frame(YearAD = year.ad,
                      D14C = D14C.decay,
                      Mass = SAMD * h))
  }

  ### Histogram bins
  C14hist <- function(D14C,
                      Mass,
                      interval) {
    massdf <- data.frame(M = Mass,
                         C14class = cut(D14C, breaks = interval),
                         labels = FALSE)
    aggMass <- aggregate(M ~ C14class,
                         massdf,
                         FUN = sum,
                         drop = FALSE)
    mid <- (diff(interval) / 2) + interval[-length(interval)]
    return(list(aggMass, mid))
  }


C14_NH <-read.table(file = file.path('/Users/shane/14Constraint Dropbox/Shane Stoner/IMPRS/NZ/Ingrid14CDistStuff/STFModel/Data',
                              "C14Graven_PNAS_GMD_Int20_2100_-53050"))


FmDist <- function(sample, ramp = ramp, bulkFm = bulkFm, FmTemp = FmTemp, dfn = 3, reso = 0.1, mp_temps = mp_temps, all.plots = FALSE, measFm = measFm){
  library(splines2)
  library(splines)
  library(zoo)
  library(DescTools)
  library(ggplot2)
  library(plotrix)
  library(weights)
  library(mpspline2)
  library(ISRaD)
  library(grid)
  library(gridExtra)
  library(dplyr)
  
  len_ramp <- min(max(ramp$temp), which(ramp$temp == 775))
  
  ### Grab only relevant data with new RPO smoothing outputs
  ramp <- ramp[1:len_ramp,]
  ramp$CO2_prop = ramp$Moving / max(ramp$Moving, na.rm = TRUE)
  
  par(mfrow = c(1,1))
  ###Thermogram
  #Temperature ramp, with intervals for interpolation = reso (default = 0.1)
  ht = seq(100, len_ramp, by = reso)
  rsp <- spline(ramp$temp, ramp$CO2_prop, xout = ht)
  
  ### Radiocarbon
  #B spline
  summary(B_fm1 <- lm(bulkFm ~ bs(FmTemp)))
  #Natural cubic spline
  summary(NCub_fm <- lm(bulkFm ~ ns(FmTemp)))
  
  #Cubic Spline
  CubFit <- interpSpline(bulkFm ~ FmTemp)
  #Linear Interpolation
  FmTempl = c(100, FmTemp, max(ramp$temp)) #Assuming flat 14C change past constraint points
  bulkFml = c(bulkFm[1], bulkFm, bulkFm[length(bulkFm)]) #Build out Fm vector to create flat lines
  Lfit <- approx(FmTempl, bulkFml, n = length(ht))
  #Mass Preserving Spline
  # Fitting mass-preserving spline all the way to the end of the data series weights the first and last fraction unnaturally,
  # so we'll find the temp where 1% & 99% of the C has been released and constrain there
  maxtemp <- max(ramp$temp)
  
  frac1 = AUC(ramp$temp, ramp$Moving, from = 100, to = mp_temps$Thigh[1], method = 'spline', subdivisions = 2000) / 1000
  tRange = seq(80, mp_temps$Thigh[1])
  a = 0
  for(i in tRange){
    if(a < frac1){
      a <- AUC(ramp$temp, ramp$Moving, from = 100, to = i, method = 'spline', subdivisions = 500)
      temp1 = i
    }
  }
  
  frac99 =(AUC(ramp$temp, ramp$Moving, from = mp_temps$Tlow[length(mp_temps$Tlow)], to = mp_temps$Thigh[length(mp_temps$Thigh)],
               method = 'spline', subdivisions = 2000)) - (AUC(ramp$temp, ramp$Moving,
                                                               from = mp_temps$Tlow[length(mp_temps$Tlow)], to = mp_temps$Thigh[length(mp_temps$Thigh)],
                                                               method = 'spline', subdivisions = 2000) / 1000)
  tRange = seq(mp_temps$Tlow[length(mp_temps$Tlow)], to = mp_temps$Thigh[length(mp_temps$Thigh)])
  a = 0
  for(i in tRange){
    if(a < frac99){
      a <- AUC(ramp$temp, ramp$Moving, from = mp_temps$Tlow[length(mp_temps$Tlow)], to = i, method = 'spline', subdivisions = 500)
      temp99 = i
    }
  }
  
  if(temp1 < 100) temp1 = 100
  if(temp99 > 675) temp99 = 675
  
  mp <- data.frame(Sample = "sample",
                   ltemp = c(temp1, mp_temps[,1][2:length(mp_temps[,1])]),
                   htemp = c(mp_temps[1:length(mp_temps[,2])-1,2], temp99),
                   bulkFm)
  
  # Old mp, with max and min as default (poor fit of 1st and last fractions with MPspline)
  # mp <- data.frame(Sample = "sample",
  #                  ltemp = c(100, mp_temps[,1][2:length(mp_temps[,1])]),
  #                  htemp = mp_temps[,2],
  #                  bulkFm)
  
  #Initialize dataframe
  frame_sp <- data.frame(ht, ht, ht, ht, ht, ht, ht)
  colnames(frame_sp) <- c('Temp', 'Area', 'B_Fm', 'Cub_Fm', "L_Fm", "NCub_Fm", "MPS_Fm")
  #Calculate total area under curve
  totAUC <- AUC(ht, rsp$y, method = 'spline', subdivisions = length(ht))
  
  Area <- ht
  n = 1
  cond = c(rep(TRUE, length(ht)-1), FALSE)
  for(t in ht){
    if(cond[n]){
      Area[n] <- AUC(ht, rsp$y, from = t, to = ht[n+1], method = 'spline') / totAUC
    } else {
      Area[n] <- AUC(ht, rsp$y, from = t, to = ht[n], method = 'spline') / totAUC
    }
    
    #frame_sp$Cub_Fm[n] <- predict(CubFit, t)$y
    #frame_sp$L_Fm[n] <- Lfit$y[n]
    n = n+1
    if(n %% 2000 == 0) print(paste("Interpolation", round(n/length(ht) * 100, 1), "percent finished."))
  }
  
  frame_sp$Area <- Area
  
  #frame_sp$Area[length(frame_sp$Area)] = 0
  frame_sp$Cub_Fm <- spline(y = bulkFm, x= FmTemp, method = 'fmm', xout = frame_sp$Temp)$y #Doesn't make much sense for extrapolation but here it is
  frame_sp$L_Fm <- Lfit$y
  frame_sp$B_Fm = predict(B_fm1, data.frame(FmTemp=frame_sp$Temp)) #B spline fit
  #frame_sp$NCub_Fm = predict(NCub_fm, data.frame(FmTemp=frame_sp$Temp)) #Natural Cubic spline fit
  frame_sp$NCub_Fm = spline(y = bulkFm, x= FmTemp, method = 'natural', xout = frame_sp$Temp)$y
  
  # mpspline can only use integers, so we'll fit a finer spline to it
  mp.sp <- mpspline(mp, d = seq(99, len_ramp))
  #frame_sp$MPS_Fm = approx(seq(100,len_ramp), mp.sp$sample$est_dcm, xout = ht)$y
  #frame_sp$MPS_Fm <- zoo::na.fill(frame_sp$MPS_Fm, fill = frame_sp$MPS_Fm[101]) ### Fill 99-100 with 100-101 values
  
  frame_sp$MPS_Fm <- na.approx(mp.sp$sample$est_1cm, xout = seq(100, len_ramp,by=reso), rule = 2)
  
  # plot(seq(1,len_ramp), mp.sp$sample$est_1cm, type = 'l', lwd =3)
  # lines(frame_sp$Temp, frame_sp$MPS_Fm, lwd = 2, col = 'red')
  
  par(mfrow = c(1,1))
  
  #Plot 14C interpolations and thermograms
  plot(frame_sp$Temp, frame_sp$Area, type = 'l', lwd = 3, col = 'steelblue',
       xlab = 'Temperature (ËšC)', ylab = 'Density',
       main = sample)
  par(new = T)
  plot(frame_sp$Temp, frame_sp$B_Fm, type = 'l', lwd = 1.5, col = 'coral', yaxt = 'n',
       ylab = '', xlab = '',
       ylim = c(max(0.4, min(frame_sp[,2:6])), min(1.2, max(frame_sp[,2:6]))))
  lines(frame_sp$Temp, frame_sp$Cub_Fm, col = 'cyan4', lwd = 1.5)
  lines(Lfit, col = 'purple')
  lines(frame_sp$Temp, frame_sp$NCub_Fm, col = 'darkgreen', lwd = 1.5)
  lines(frame_sp$Temp, frame_sp$MPS_Fm, col = "black", lty = 2, lwd =1.5)
  points(FmTemp, bulkFm, pch = 21, bg = 'blue')
  axis(side = 4)
  mtext(side = 4, 'Fm')
  legend('topright', legend = c('B Spline', 'Cubic Spline', 'Linear', "Nat. Cubic", "MP Spline", 'Thermogram',"14C Data"),
         lty = c(1,1,1,1,2,1,NA), col = c('coral', 'cyan4', 'purple','darkgreen', 'black', 'steelblue','black'),
         #bg = c(1,1,1),
         pch = c(NA, NA,NA,NA,NA, NA,21),
         lwd = 2, cex = 0.7)
  
  #Histograms for outputs
  par(mfrow = c(2,1))
  breaks <- seq(from = 0.0, to = 2, length.out = 1000)
  
  if(all.plots) hist(frame_sp$L_Fm, main ='Linear Interpolation, Unweighted', freq = FALSE)
  LinHist <- weighted.hist(frame_sp$L_Fm, frame_sp$Area, freq = FALSE, xlim = c(0.5, 1.5),
                           main = 'Linear Interpolation, Weighted', breaks = breaks, plot = ifelse(all.plots, TRUE, FALSE))
  
  if(all.plots) hist(frame_sp$B_Fm, main = 'B Spline, Unweighted', freq = FALSE)
  BHist <- weighted.hist(frame_sp$B_Fm, frame_sp$Area, freq= FALSE, xlim = c(0.5, 1.5),
                         main = 'B Spline, Weighted', breaks = breaks, plot = ifelse(all.plots, TRUE, FALSE))
  
  if(all.plots) hist(frame_sp$Cub_Fm, main ='Cubic Spline, Unweighted', freq = FALSE)
  CubHist <- weighted.hist(frame_sp$Cub_Fm, frame_sp$Area, freq = FALSE, xlim = c(0.5, 1.5),
                           main = 'Cubic Spline, Weighted', breaks = breaks, plot = ifelse(all.plots, TRUE, FALSE))
  
  if(all.plots) hist(frame_sp$NCub_Fm, main = 'Natural Cubic Spline, Unweighted', freq=FALSE)
  NCubHist <- weighted.hist(frame_sp$NCub_Fm, frame_sp$Area, freq = FALSE, xlim = c(0.5, 1.5),
                            main = 'Natural Cubic Spline, Weighted', breaks = breaks, plot = ifelse(all.plots, TRUE, FALSE))
  
  if(all.plots) hist(frame_sp$MPS_Fm, main = 'Mass-Preserving Spline, Unweighted', freq=FALSE)
  MPHist <- weighted.hist(frame_sp$MPS_Fm, frame_sp$Area, freq = FALSE, xlim = c(0.5, 1.5),
                          main = 'Mass-Preserving Spline, Weighted', breaks = breaks, plot = ifelse(all.plots, TRUE, FALSE))
  
  if(all.plots){
    par(mfrow = c(1,1))
    plot(ramp$temp, ramp$Moving, type = 'l', lwd = 3, xlim = c(150, len_ramp), main = paste(sample, ":: Mass-preserving spline fit"))
    par(new = T)
    plot(FmTemp, bulkFm, ylim = c(.6, 1.12), axes = F, ann = F, xlim = c(150, len_ramp), pch = 16, col = 'steelblue',cex = 1.5)
    for(i in 1:length(FmTemp)){
      x0v = mp_temps[,1][i]
      y0h = 0
      x1b = mp_temps[,2][i]
      y1b = mp[,4][i]
      if(i == 1 ){
        segments(x0 = x1b, y0 = y0h, x1 = x1b, y1 = y1b, col = 'brown2', lwd = 4)
        segments(x0 = 100, y0 = y1b, x1 = x1b, y1 = y1b, col = 'brown2', lwd = 4)
      } else {
        x0h = mp[,3][i-1]
        segments(x0 = x1b, y0 = y0h, x1 = x1b, y1 = y1b, col = 'brown2', lwd = 4)
        segments(x0 = x0h, y0 = y1b, x1 = x1b, y1 = y1b, col = 'brown2', lwd = 4)
        segments(x0 = x0h, y0 = y1b, x1 = x0v, y1 = y0h, col = 'brown2', lwd = 4)
      }
    }
    lines(frame_sp$Temp, frame_sp$MPS_Fm, lty = 2, lwd = 3, col = 'darkgreen')
  }
  
  ##Plot those distributions
  Cubstats <- c(wtd.quantile(frame_sp$Cub_Fm, weights = frame_sp$Area,
                             normwt = TRUE, probs = c(0.1, 0.25, 0.5, 0.75, 0.9)),
                wmean = wtd.mean(frame_sp$Cub_Fm, weight = frame_sp$Area))
  Linstats <- c(wtd.quantile(frame_sp$L_Fm, weights = frame_sp$Area,
                             normwt = TRUE, probs = c(0.1, 0.25, 0.5, 0.75, 0.9)),
                wmean = wtd.mean(frame_sp$L_Fm, weight = frame_sp$Area))
  Bstats <- c(wtd.quantile(frame_sp$B_Fm, weights = frame_sp$Area,
                           normwt = TRUE, probs = c(0.1, 0.25, 0.5, 0.75, 0.9)),
              wmean = wtd.mean(frame_sp$B_Fm, weight = frame_sp$Area))
  NCubstats <- c(wtd.quantile(frame_sp$NCub_Fm, weights = frame_sp$Area,
                              normwt = TRUE, probs = c(0.1, 0.25, 0.5, 0.75, 0.9)),
                 wmean = wtd.mean(frame_sp$NCub_Fm, weight = frame_sp$Area))
  MPstats <- c(wtd.quantile(frame_sp$MPS_Fm, weights = frame_sp$Area,
                            normwt = TRUE, probs = c(0.1, 0.25, 0.5, 0.75, 0.9)),
               wmean = wtd.mean(frame_sp$MPS_Fm, weight = frame_sp$Area))
  
  xlim = c(max(min(Bstats, Linstats, Cubstats, NCubstats, MPstats),0.5) - 0.015,
           min(max(Bstats, Linstats, Cubstats, NCubstats, MPstats), 1.5) + 0.015)
  #Linear Interpolation
  colz = c('#feb24c','#fd8d3c','#fc4e2a','#e31a1c','#b10026','#4a1486',"black")
  if(all.plots){
    print(ggplot(data = frame_sp) +
            geom_vline(xintercept = Linstats, lty = 2) + theme_bw() +
            geom_freqpoly(bins = 200, aes(x = L_Fm, y=..density.., weight = Area),
                          colour="black", fill="white") +
            geom_density(aes(x = L_Fm, y=..density.., weight = abs(frame_sp$Area),fill="#FF6666"),alpha = 0.2) +
            xlim(xlim) +
            ggtitle(paste(sample, ':: Linear Spline Distribution')) + xlab('Fraction Modern') +
            geom_label(aes(x = Linstats, y = 0.7), data = data.frame(names(Linstats)), label =  names(Linstats), size = 2))
    
    #B Spline
    print(ggplot(data = frame_sp) +
            geom_vline(xintercept = Bstats, lty = 2) + theme_bw() +
            geom_freqpoly(bins = 200, aes(x = B_Fm, y=..density.., weight = Area),
                          colour="black", fill="white") +
            geom_density(aes(x = B_Fm,y=..density.., weight = abs(frame_sp$Area),fill="#FFFF66"),alpha = 0.2) +
            xlim(xlim) +
            ggtitle(paste(sample, ':: B Spline Distribution')) + xlab('Fraction Modern') +
            geom_label(aes(x = Bstats, y = 0.7), data = data.frame(names(Bstats)), label =  names(Bstats), size = 2))
    
    #Cubic Spline
    print(ggplot(data = frame_sp) +
            geom_vline(xintercept = Cubstats, lty = 2) + theme_bw() +
            geom_freqpoly(bins = 200, aes(x = Cub_Fm, y=..density.., weight = Area),
                          colour="black", fill="white") +
            geom_density(aes(x = Cub_Fm,y=..density.., weight = abs(frame_sp$Area),fill="#FF6666"),alpha = 0.2) +
            xlim(xlim) +
            ggtitle(paste(sample, ':: Cubic Spline Distribution')) + xlab('Fraction Modern') +
            geom_label(aes(x = Cubstats, y = 0.7), data = data.frame(names(Cubstats)), label =  names(Cubstats), size = 2))
    
    #Natural Cubic Spline
    print(ggplot(data = frame_sp) +
            geom_vline(xintercept = NCubstats, lty = 2) + theme_bw() +
            geom_freqpoly(bins = 200, aes(x = NCub_Fm, y=..density.., weight = Area),
                          colour="black", fill="white") +
            geom_density(aes(x = NCub_Fm,y=..density.., weight = abs(frame_sp$Area),fill="#FF6666"),alpha = 0.2) +
            xlim(xlim) + theme_bw() +
            ggtitle(paste(sample, ':: Natural Cubic Spline Distribution')) + xlab('Fraction Modern') +
            geom_label(aes(x = NCubstats, y = 0.7), data = data.frame(names(NCubstats)), label =  names(Cubstats), size = 2))
    
    #Mass-preserving Spline
    print(ggplot(data = frame_sp) +
            geom_vline(xintercept = MPstats, lty = 2) + theme_bw() +
            geom_freqpoly(bins = 200, aes(x = MPS_Fm, y=..density.., weight = Area),
                          colour="black", fill="white") +
            geom_density(aes(x = MPS_Fm,y=..density.., weight = abs(frame_sp$Area),fill="#FF6666"),alpha = 0.2) +
            xlim(xlim) + theme_bw() +
            ggtitle(paste(sample, ':: Mass-Preserving Spline Distribution')) + xlab('Fraction Modern') +
            geom_label(aes(x = MPstats, y = 0.7), data = data.frame(names(MPstats)), label =  names(MPstats), size = 2))
  }
  #All splines overlain (Density)
  xlim = c(xlim[1] - 0.005, xlim[2] + 0.005)
  bins = 200
  
  print(ggplot(data=frame_sp) +
          geom_freqpoly(bins = bins, aes(x = L_Fm, y = ..density.., weight = abs(Area),color="#FF6666"),alpha = 1) +
          geom_freqpoly(bins = bins, aes(x = B_Fm, y = ..density.., weight = abs(Area),color="#FFFF66"),alpha = 1) +
          geom_freqpoly(bins = bins, aes(x = Cub_Fm, y = ..density.., weight = abs(Area),color="#FF66FF"),alpha = 1) +
          geom_freqpoly(bins = bins, aes(x = NCub_Fm, y = ..density.., weight = abs(Area),color="#6666FF"),alpha = 1) +
          geom_freqpoly(bins = bins, aes(x = MPS_Fm, y = ..density.., weight = abs(Area),color="steelblue2"),alpha = 1) +
          xlim(xlim) + theme_bw() +
          ggtitle(paste(sample, ':: Weighted Histogram Polygons')) +
          scale_color_discrete(name = "Fit", labels = c("Linear", "Cubic", "B Spline", "Nat. Cubic", "Mass-Preserving")))
  
  #All splines overlain (Histograms)
  # par(mfrow = c(1,1))
  # plot(FmTemp, bulkFm, pch = 21, bg = 'blue', ylab = 'Fm',
  #      ylim = c(0.5, max(bulkFm, frame_sp$B_Fm, frame_sp$Cub_Fm, frame_sp$L_Fm)),
  #      xlim = c(min(frame_sp$Temp), max(frame_sp$Temp)))
  # par(new = T)
  # plot(frame_sp$Temp, frame_sp$Area, type = 'l', lwd = 3, col = 'steelblue', xlab = '', ylab = '',
  #      main = sample, yaxt = 'n')
  # par(new = T)
  # plot(frame_sp$Temp, frame_sp$B_Fm, type = 'l', lwd = 1.5, col = 'coral', yaxt = 'n', ylab = '', xlab = '',
  #      ylim = c(0.5, max(bulkFm, frame_sp$B_Fm, frame_sp$Cub_Fm, frame_sp$L_Fm)))
  # lines(frame_sp$Temp, frame_sp$Cub_Fm, col = 'cyan4', lwd = 1.5)
  # lines(Lfit, col = 'purple', lwd = 1.5)
  # lines(frame_sp$Temp, frame_sp$NCub_Fm, col = 'darkgreen', lwd = 1.5)
  # lines(frame_sp$Temp, frame_sp$MPS_Fm, col = 'black', lty = 2, lwd = 1.5)
  # axis(side = 4)
  # mtext(side = 2, 'Fm')
  # legend('topright', legend = c('B Spline', 'Cubic Spline', 'Linear', "Nat. Cubic", "MP Spline", 'Thermogram',"14C Data"),
  #        lty = c(1,1,1,1,2,1,NA), col = c('coral', 'cyan4', 'purple','darkgreen', 'black', 'steelblue','black'),
  #        #bg = c(1,1,1),
  #        pch = c(NA, NA,NA,NA,NA, NA,21),
  #        lwd = 2, cex = 0.7)
  
  ### Compare stats against measured means
  convert_fm_d14c <- function(fm = NA, d14c = NA, obs_date_y, verbose = TRUE) {
    lambda <- 0.00012097
    if (is.na(d14c)) {
      if (verbose) {
        message("calculating ", "\u0394", "14C from fraction modern")
      }
      (fm * exp(lambda * (-obs_date_y + 1950)) - 1) * 1000
    } else if (is.na(fm)) {
      if (verbose) {
        message("calculating fraction modern from ", paste0("\u0394", "14C"))
      }
      ((d14c / 1000) + 1) / exp(lambda * (-obs_date_y + 1950))
    }
  }
  
  q <- data.frame(
    round(measFm, 4),
    round(Linstats[6] - measFm, 4),
    round(Cubstats[6] - measFm, 4),
    round(NCubstats[6] - measFm, 4),
    round(Bstats[6] - measFm, 4),
    round(MPstats[6] - measFm, 4)
  )
  
  colnames(q) <- c("Measured", "Linear", "Cubic", "Nat. Cubic", "B Spline", "MP Spline")
  plot.new()
  pvp = viewport(x = .5, y = .3)
  pushViewport(pvp)
  grid.text("Difference in mean Fm", x=.5, y = .8)
  grid.table(q)
  #grid.text(samplesize, x=.9, y = .55)
  
  print(ggplot(data=frame_sp) +
          geom_density(aes(x = L_Fm, y = ..density.., weight = abs(Area),color="#FF6666"),alpha = 0.5, lwd =1.2) +
          geom_density(aes(x = B_Fm, y = ..density.., weight = abs(Area),color="#FFFF66"),alpha = 0.5, lwd =1.2) +
          geom_density(aes(x = Cub_Fm, y = ..density.., weight = abs(Area),color="#FF66FF"),alpha = 0.5, lwd = 1.2) +
          geom_density(aes(x = NCub_Fm, y = ..density.., weight = abs(Area),color="#6666FF"),alpha = 0.5, lwd = 1.2) +
          geom_density(aes(x = MPS_Fm, y = ..density.., weight = abs(Area),color="steelblue2"),alpha = 0.5, lwd = 1.2) +
          xlim(xlim) + xlab("Fm") + theme_bw() +
          ggtitle(paste(sample, ':: Weighted Densities')) +
          scale_color_discrete(name = "Fit", labels = c("Linear", "B Spline","Cubic", "Nat. Cubic", "MP Spline")))
  
  # print("Linear, B, Cubic")
  # print(Linstats)
  # print(Bstats)
  # print(Cubstats)
  return(list(data.frame(sample, Linstats, Bstats, Cubstats, NCubstats, MPstats),
              data.frame(sample, MidFm = breaks,
                         Lin = c(0,LinHist$density),
                         B = c(0,BHist$density),
                         Cub = c(0,CubHist$density),
                         NCub = c(0,NCubHist$density),
                         MPS = c(0,MPHist$density),
                         LinDens = density(LinHist$density, n = 1000)$y,
                         BDens = density(BHist$density, n = 1000)$y,
                         CubDens = density(CubHist$density, n = 1000)$y,
                         NCubDens = density(NCubHist$density, n = 1000)$y,
                         MPSDens = density(MPHist$density, n = 1000)$y
              ),
              data.frame(Area = frame_sp$Area,
                         L_Fm = frame_sp$L_Fm,
                         B_Fm = frame_sp$B_Fm,
                         Cub_Fm = frame_sp$Cub_Fm,
                         NCub_Fm = frame_sp$NCub_Fm,
                         MPS_Fm = frame_sp$MPS_Fm)))
}

```

```{r Setup for Bulk Soil, echo = FALSE}


rampEa = read.csv('/Users/shane/14Constraint Dropbox/Shane Stoner/IMPRS/ThermalAnalysis/Ch2/WeP4_Pyrox_New/SurfaceNewFmCorr/0-10 Bulk/Bulk_0-10_p_tot.csv', header = FALSE)
rampEa$E = seq(50, 400, length.out = 400)
#colnames(ramp) = c("P", "E")

ramp = read.csv('/Users/shane/14Constraint Dropbox/Shane Stoner/IMPRS/ThermalAnalysis/Ch2/WeP4_Pyrox_New/SurfaceNewFmCorr/0-10 Bulk/smooth_WeP4_0-10_Bulk_RPO.csv')

p_frame <- data.frame(E = seq(50, 400, length.out = 400))

for(i in seq(1,length(list.files('/Users/shane/14Constraint Dropbox/Shane Stoner/IMPRS/ThermalAnalysis/Ch2/WeP4_Pyrox_New/SurfaceNewFmCorr/0-10 Bulk', pattern = "frac")))){
  if(i != 1){
    fr <- read.csv(list.files('/Users/shane/14Constraint Dropbox/Shane Stoner/IMPRS/ThermalAnalysis/Ch2/WeP4_Pyrox_New/SurfaceNewFmCorr/0-10 Bulk', pattern = "frac", full.names = TRUE)[i], skip = 0, header = FALSE)
    colnames(fr) <- paste0("frac_", i-1)
    p_frame[,i] <- fr
  }
}

p_frame$tot <- read.csv(list.files('/Users/shane/14Constraint Dropbox/Shane Stoner/IMPRS/ThermalAnalysis/Ch2/WeP4_Pyrox_New/SurfaceNewFmCorr/0-10 Bulk', pattern = "p_tot.csv", full.names = TRUE), skip = 0, header = FALSE)[,1]

WetzTab <- read.csv('/Users/shane/14Constraint Dropbox/Shane Stoner/IMPRS/Thesis/Chapter2/BigResultsTable.csv')

isof <- data.frame(
  bulkFm = SoilR::Delta14C_from_AbsoluteFractionModern(read.csv(list.files('/Users/shane/14Constraint Dropbox/Shane Stoner/IMPRS/ThermalAnalysis/Ch2/WeP4_Pyrox_New/SurfaceNewFmCorr/0-10 Bulk', pattern = "iso_info.csv", full.names = TRUE), skip = 0, header = TRUE)$Fm),
  FmTemp = WetzTab %>% dplyr::filter(Fraction == "Bulk Soil" & Depth == "0-10") %>% dplyr::select('Max..Temp')
)

colnames(isof) = c("bulkFm", "FmTemp")

mp_temps = data.frame(Tlow = dplyr::filter(WetzTab, Fraction == "Bulk Soil" & Depth == "0-10")[,"Min..Temp"],
                      Thigh =dplyr::filter(WetzTab, Fraction == "Bulk Soil" & Depth == "0-10")[,"Max..Temp"])


bulkFm = dplyr::filter(WetzTab, Fraction == "Bulk Soil" & Depth == "0-10")['Fm'][,1]
FmTemp = dplyr::filter(WetzTab, Fraction == "Bulk Soil" & Depth == "0-10")['T50'][,1]
measFm = dplyr::filter(WetzTab, Fraction == "Bulk Soil" & Depth == "0-10")['Bulk.Fm'][1,1]


```

```{r Run Thermogram Dists for Bulk Soil}

Bulk_T <- FmDist("Bulk Soil", ramp, bulkFm, FmTemp, mp_temps = mp_temps, measFm = measFm, all.plots = TRUE)

```

```{r Setup for FPOM, echo = FALSE}


rampEa = read.csv('/Users/shane/14Constraint Dropbox/Shane Stoner/IMPRS/ThermalAnalysis/Ch2/WeP4_Pyrox_New/SurfaceNewFmCorr/0-10 FPOM/FPOM_0-10_p_tot.csv', header = FALSE)
rampEa$E = seq(50, 400, length.out = 400)
colnames(ramp) = c("P", "E")

ramp = read.csv('/Users/shane/14Constraint Dropbox/Shane Stoner/IMPRS/ThermalAnalysis/Ch2/WeP4_Pyrox_New/SurfaceNewFmCorr/0-10 FPOM/smooth_WeP4_0-10_FPOM_re_RPO.csv')

p_frame <- data.frame(E = seq(50, 400, length.out = 400))

for(i in seq(1,length(list.files('/Users/shane/14Constraint Dropbox/Shane Stoner/IMPRS/ThermalAnalysis/Ch2/WeP4_Pyrox_New/SurfaceNewFmCorr/0-10 FPOM', pattern = "frac")))){
  if(i != 1){
    fr <- read.csv(list.files('/Users/shane/14Constraint Dropbox/Shane Stoner/IMPRS/ThermalAnalysis/Ch2/WeP4_Pyrox_New/SurfaceNewFmCorr/0-10 FPOM', pattern = "frac", full.names = TRUE)[i], skip = 0, header = FALSE)
    colnames(fr) <- paste0("frac_", i-1)
    p_frame[,i] <- fr
  }
}

p_frame$tot <- read.csv(list.files('/Users/shane/14Constraint Dropbox/Shane Stoner/IMPRS/ThermalAnalysis/Ch2/WeP4_Pyrox_New/SurfaceNewFmCorr/0-10 FPOM', pattern = "p_tot.csv", full.names = TRUE), skip = 0, header = FALSE)[,1]

WetzTab <- read.csv('/Users/shane/14Constraint Dropbox/Shane Stoner/IMPRS/Thesis/Chapter2/BigResultsTable.csv')

isof <- data.frame(
  FPOMFm = SoilR::Delta14C_from_AbsoluteFractionModern(read.csv(list.files('/Users/shane/14Constraint Dropbox/Shane Stoner/IMPRS/ThermalAnalysis/Ch2/WeP4_Pyrox_New/SurfaceNewFmCorr/0-10 FPOM', pattern = "iso_info.csv", full.names = TRUE), skip = 0, header = TRUE)$Fm),
  FmTemp = WetzTab %>% dplyr::filter(Fraction == "FPOM" & Depth == "0-10") %>% dplyr::select('Max..Temp')
)

colnames(isof) = c("BulkFm", "FmTemp")

mp_temps = data.frame(Tlow = dplyr::filter(WetzTab, Fraction == "FPOM" & Depth == "0-10")[,"Min..Temp"],
                      Thigh =dplyr::filter(WetzTab, Fraction == "FPOM" & Depth == "0-10")[,"Max..Temp"])


bulkFm = dplyr::filter(WetzTab, Fraction == "FPOM" & Depth == "0-10")['Fm'][,1]
FmTemp = dplyr::filter(WetzTab, Fraction == "FPOM" & Depth == "0-10")['T50'][,1]
measFm = dplyr::filter(WetzTab, Fraction == "FPOM" & Depth == "0-10")['Bulk.Fm'][1,1]


```


```{r Run Thermogram Dists for Bulk Soil}

FPOM_T <- FmDist("FPOM", ramp, bulkFm, FmTemp, mp_temps = mp_temps, measFm = measFm, all.plots = TRUE)

```


```{r Setup for OPOM, echo = FALSE}


rampEa = read.csv('/Users/shane/14Constraint Dropbox/Shane Stoner/IMPRS/ThermalAnalysis/Ch2/WeP4_Pyrox_New/SurfaceNewFmCorr/0-10 OPOM/OPOM_0-10_p_tot.csv', header = FALSE)
rampEa$E = seq(50, 400, length.out = 400)
colnames(ramp) = c("P", "E")

ramp = read.csv('/Users/shane/14Constraint Dropbox/Shane Stoner/IMPRS/ThermalAnalysis/Ch2/WeP4_Pyrox_New/SurfaceNewFmCorr/0-10 OPOM/smooth_WeP4_0-10_OPOM_re_re_RPO.csv')

p_frame <- data.frame(E = seq(50, 400, length.out = 400))

for(i in seq(1,length(list.files('/Users/shane/14Constraint Dropbox/Shane Stoner/IMPRS/ThermalAnalysis/Ch2/WeP4_Pyrox_New/SurfaceNewFmCorr/0-10 OPOM', pattern = "frac")))){
  if(i != 1){
    fr <- read.csv(list.files('/Users/shane/14Constraint Dropbox/Shane Stoner/IMPRS/ThermalAnalysis/Ch2/WeP4_Pyrox_New/SurfaceNewFmCorr/0-10 OPOM', pattern = "frac", full.names = TRUE)[i], skip = 0, header = FALSE)
    colnames(fr) <- paste0("frac_", i-1)
    p_frame[,i] <- fr
  }
}

p_frame$tot <- read.csv(list.files('/Users/shane/14Constraint Dropbox/Shane Stoner/IMPRS/ThermalAnalysis/Ch2/WeP4_Pyrox_New/SurfaceNewFmCorr/0-10 OPOM', pattern = "p_tot.csv", full.names = TRUE), skip = 0, header = FALSE)[,1]

WetzTab <- read.csv('/Users/shane/14Constraint Dropbox/Shane Stoner/IMPRS/Thesis/Chapter2/BigResultsTable.csv')

isof <- data.frame(
  OPOMFm = SoilR::Delta14C_from_AbsoluteFractionModern(read.csv(list.files('/Users/shane/14Constraint Dropbox/Shane Stoner/IMPRS/ThermalAnalysis/Ch2/WeP4_Pyrox_New/SurfaceNewFmCorr/0-10 OPOM', pattern = "iso_info.csv", full.names = TRUE), skip = 0, header = TRUE)$Fm),
  FmTemp = WetzTab %>% dplyr::filter(Fraction == "OPOM" & Depth == "0-10") %>% dplyr::select('Max..Temp')
)

colnames(isof) = c("BulkFm", "FmTemp")

mp_temps = data.frame(Tlow = dplyr::filter(WetzTab, Fraction == "OPOM" & Depth == "0-10")[,"Min..Temp"],
                      Thigh =dplyr::filter(WetzTab, Fraction == "OPOM" & Depth == "0-10")[,"Max..Temp"])


bulkFm = dplyr::filter(WetzTab, Fraction == "OPOM" & Depth == "0-10")['Fm'][,1]
FmTemp = dplyr::filter(WetzTab, Fraction == "OPOM" & Depth == "0-10")['T50'][,1]
measFm = dplyr::filter(WetzTab, Fraction == "OPOM" & Depth == "0-10")['Bulk.Fm'][1,1]


```


```{r Run Thermogram Dists for Bulk Soil}

OPOM_T <- FmDist("OPOM", ramp, bulkFm, FmTemp, mp_temps = mp_temps, measFm = measFm, all.plots = TRUE)

```


```{r Setup for MOM, echo = FALSE}


rampEa = read.csv('/Users/shane/14Constraint Dropbox/Shane Stoner/IMPRS/ThermalAnalysis/Ch2/WeP4_Pyrox_New/SurfaceNewFmCorr/0-10 MOM/MOM_0-10_p_tot.csv', header = FALSE)
rampEa$E = seq(50, 400, length.out = 400)
colnames(ramp) = c("P", "E")

ramp = read.csv('/Users/shane/14Constraint Dropbox/Shane Stoner/IMPRS/ThermalAnalysis/Ch2/WeP4_Pyrox_New/SurfaceNewFmCorr/0-10 MOM/smooth_WeP4_0-10_MOM_Sept2_RPO copy.csv')

p_frame <- data.frame(E = seq(50, 400, length.out = 400))

for(i in seq(1,length(list.files('/Users/shane/14Constraint Dropbox/Shane Stoner/IMPRS/ThermalAnalysis/Ch2/WeP4_Pyrox_New/SurfaceNewFmCorr/0-10 MOM', pattern = "frac")))){
  if(i != 1){
    fr <- read.csv(list.files('/Users/shane/14Constraint Dropbox/Shane Stoner/IMPRS/ThermalAnalysis/Ch2/WeP4_Pyrox_New/SurfaceNewFmCorr/0-10 MOM', pattern = "frac", full.names = TRUE)[i], skip = 0, header = FALSE)
    colnames(fr) <- paste0("frac_", i-1)
    p_frame[,i] <- fr
  }
}

p_frame$tot <- read.csv(list.files('/Users/shane/14Constraint Dropbox/Shane Stoner/IMPRS/ThermalAnalysis/Ch2/WeP4_Pyrox_New/SurfaceNewFmCorr/0-10 MOM', pattern = "p_tot.csv", full.names = TRUE), skip = 0, header = FALSE)[,1]

WetzTab <- read.csv('/Users/shane/14Constraint Dropbox/Shane Stoner/IMPRS/Thesis/Chapter2/BigResultsTable.csv')

isof <- data.frame(
  MOMFm = SoilR::Delta14C_from_AbsoluteFractionModern(read.csv(list.files('/Users/shane/14Constraint Dropbox/Shane Stoner/IMPRS/ThermalAnalysis/Ch2/WeP4_Pyrox_New/SurfaceNewFmCorr/0-10 MOM', pattern = "iso_info.csv", full.names = TRUE), skip = 0, header = TRUE)$Fm),
  FmTemp = WetzTab %>% dplyr::filter(Fraction == "MOM" & Depth == "0-10") %>% dplyr::select('Max..Temp')
)

colnames(isof) = c("BulkFm", "FmTemp")

mp_temps = data.frame(Tlow = dplyr::filter(WetzTab, Fraction == "MOM" & Depth == "0-10")[,"Min..Temp"],
                      Thigh =dplyr::filter(WetzTab, Fraction == "MOM" & Depth == "0-10")[,"Max..Temp"])


bulkFm = dplyr::filter(WetzTab, Fraction == "MOM" & Depth == "0-10")['Fm'][,1]
FmTemp = dplyr::filter(WetzTab, Fraction == "MOM" & Depth == "0-10")['T50'][,1]
measFm = dplyr::filter(WetzTab, Fraction == "MOM" & Depth == "0-10")['Bulk.Fm'][1,1]


```


```{r Run Thermogram Dists for Bulk Soil}

MOM_T <- FmDist("MOM", ramp, bulkFm, FmTemp, mp_temps = mp_temps, measFm = measFm, all.plots = TRUE)

```



```{r Combine fractions into one, echo = FALSE }


Fracs_T = data.frame(
  FPOM = FPOM_T[[2]]$NCub,
  OPOM = OPOM_T[[2]]$NCub,
  MOM = MOM_T[[2]]$NCub
)

Fracs_T = list(
  FPOM = data.frame(
    MidFm = FPOM_T[[2]]$MidFm, NCub = FPOM_T[[2]]$NCub),
  OPOM = data.frame(
    MidFm = OPOM_T[[2]]$MidFm, NCub = OPOM_T[[2]]$NCub),
  MOM = data.frame(
    MidFm = MOM_T[[2]]$MidFm, NCub = MOM_T[[2]]$NCub)
)

Fracs_T = list(
  FPOM = data.frame(
    ggplot_build(ggplot(FPOM_T[[3]], aes(x = NCub_Fm, y = ..density.., weight = abs(Area))) + 
                   geom_density(n = 1001) +xlim(0,2))$data[[1]][,2:1]),
  OPOM = data.frame(
    ggplot_build(ggplot(OPOM_T[[3]], aes(x = NCub_Fm, y = ..density.., weight = abs(Area))) + 
                   geom_density(n = 1001) +xlim(0,2))$data[[1]][,2:1]),
  MOM = data.frame(
    ggplot_build(ggplot(MOM_T[[3]], aes(x = NCub_Fm, y = ..density.., weight = abs(Area))) + 
                   geom_density(n = 1001) +xlim(0,2))$data[[1]][,2:1])
)

Fracs_T %>%
  bind_rows(.id = "Frac") %>% 
  group_by(Frac) %>% 
  dplyr::mutate(Dens = ifelse(y == 0, NA, y)) %>% #gliNCube()
  dplyr::mutate(Dens = abs(na.spline(Dens))) %>% #View()
  dplyr::mutate(Dens = ifelse(
    Frac == "MOM", Dens * 0.851, ifelse(Frac == "OPOM", Dens * 0.062, Dens * 0.087))) %>% 
  ggplot(aes(x = x, y = Dens, color = Frac)) + geom_line(size = 1.3) +xlim(0.6, 1.2) + theme_bw()
  
Fracs_T %>%
  bind_rows(.id = "Frac") %>% 
  group_by(Frac) %>% 
  dplyr::mutate(Dens = ifelse(y == 0, NA, y)) %>% #gliNCube()
  dplyr::mutate(Dens = abs(na.spline(Dens))) %>% #View()
  dplyr::mutate(Dens = ifelse(
    Frac == "MOM", Dens * 0.851, ifelse(Frac == "OPOM", Dens * 0.062, Dens * 0.087))) %>% 
  ungroup %>% 
  group_by(x) %>% 
  dplyr::summarize(Frac_dens = sum(Dens)) %>% #gliNCube()
  ggplot(aes(x = x, y = Frac_dens)) + geom_line(color = 'Purple', size = 1.3) +xlim(0.6, 1.2)+ theme_bw()

Fracs_T %>%
  bind_rows(.id = "Frac") %>% 
  group_by(Frac) %>% 
  dplyr::mutate(Dens = ifelse(y == 0, NA, y)) %>% #gliNCube()
  dplyr::mutate(Dens = abs(na.spline(Dens))) %>% #View()
  dplyr::mutate(Dens = ifelse(
    Frac == "MOM", Dens * 0.851, ifelse(Frac == "OPOM", Dens * 0.062, Dens * 0.087))) %>% 
  ungroup() %>% 
  group_by(x) %>% 
  dplyr::summarize(Dens = sum(Dens)) %>% 
  mutate(Dens = Dens / sum(Dens))  -> sumCost


Bulk_Dens <- data.frame(ggplot_build(ggplot(Bulk_T[[3]], aes(x = NCub_Fm, y = ..density.., weight = abs(Area))) + 
                          geom_density(n = 1001) +xlim(0,2))$data[[1]][,2:1]) 

Bulk_Dens %>% 
  dplyr::mutate(Dens = ifelse(y == 0, NA, y)) %>% #gliNCube()
  dplyr::mutate(Dens = abs(na.spline(Dens))) %>% 
  mutate(Dens = Dens / sum(Dens)) %>% 
  select(x, Dens) -> bulkCost

colnames(sumCost) <- c("C14", "dens")
colnames(bulkCost) <- c("C14", "dens")

bind_rows(Fracs = sumCost, Bulk = bulkCost, .id = "Cost") %>% 
  #dplyr::rename() = c('Fracs', "Bulk") %>% 
  ggplot(aes(x = C14, y = dens, color = Cost)) + geom_line(size = 1.3) + xlim(0.5, 1.2) + theme_bw()


```

```{r Using distributions as model constraints, initiailization}

library(SoilR)
library(FME)
library(dplyr)

D14C_curve <- approxfun(x = C14_NH$Year.AD, y = C14_NH$Delta.14C, method = "linear", rule = 2)

inputs = 10
gam = 0.3
lag = 1
start = 0

inipars <- c(k1 = 0.01, k2 = 0.0001, a21 = 0.1)

if(max(sumCost$C14) == 2){
  sumCost$C14 <- Delta14C_from_AbsoluteFractionModern(sumCost$C14)
}

ranger = seq(-1000, 1000, length.out = 1001)

sfunc_p <- function(pars, yr_obs = 2019){
  par(mfrow = c(1,2))
  
  mod = SoilR::ThreepFeedbackModel14(
    t = seq(start, yr_obs),
    ks = c(pars[1], pars[2], pars[3]),
    a21 = pars[1] * pars[4],
    a12 = pars[2] * pars[5],
    a32 = pars[2] * pars[6],
    a23 = pars[3] * pars[7],
    C0 = c(inputs/pars[1],inputs/pars[2], inputs/pars[3]),
    F0_Delta14C = c(D14C_curve(start)-100, D14C_curve(start) - 100),
    #a21 = pars[3]*pars[1],
    In = inputs,
    lag = lag,
    #gam = gam,
    inputFc = C14_NH %>%  dplyr::filter(Year.AD > start - 100)
  )

  A = matrix(
    c(-pars[1] %>% as.double(), pars[2] * pars[5],          0, 
      pars[1]*pars[4],          -pars[2] %>% as.double(),   pars[3] * pars[7],
      0,                        pars[2] * pars[6],          -pars[3] %>% as.double()),
    nrow = 3,
    ncol = 3,
    byrow = T
  )
  
  plot(rowSums(getC(mod)))

  U = matrix(c(inputs, 0, 0),
             nrow = 3,
             ncol = 1,
             byrow = T)

  UnsysW1 <- SystemRDC(
    A = A,
    u = U,
    nyears = 2500,
    yrobs = yr_obs,
    C14atm = C14_NH$Delta.14C,
    C14YearAD = C14_NH$Year.AD + lag
  )

  UnsyshistW1 <- C14hist(
    D14C = UnsysW1$D14C,
    Mass = UnsysW1$Mass / sum(UnsysW1$Mass, na.rm=TRUE),
    interval = ranger
  )
  
  print(paste("Mean TT:",transitTime(A,U)[[1]]))
  
  dister = stats::density(UnsysW1$D14C, weights = abs(UnsysW1$Mass / sum(UnsysW1$Mass, na.rm=TRUE)), from = -1000, to = 1000, n = 1001)

  wmean = Delta14C_from_AbsoluteFractionModern(measFm)
  
  spline(dister$x, dister$y, xout = seq(-1000, 1000, length.out = 1001)) %>% #glimpse()
    data.frame(.) %>%
    dplyr::mutate(C14 = x) %>% dplyr::mutate(dens = y) %>%
    select(C14, dens) -> dister_spline

  dister_spline$dens <- ((dister_spline$dens / sum(dister_spline$dens)) +1) * 10^10
  
  plot(sumCost_mod$C14, sumCost_mod$dens, col = 'black', type = 'l', lwd = 2, ylim = c(min(min(dister_spline$dens, na.rm = TRUE), min(sumCost_mod$dens, na.rm = TRUE)),
                                                                                       max(max(dister_spline$dens, na.rm = TRUE), max(sumCost_mod$dens, na.rm = TRUE))), 
       xlim = c(-400, 400),
       xlab = expression(paste(Delta^{14}, "C")),
       ylab = "Density")
  lines(dister_spline, lwd = 2, col = 'red')
  #lines(sumCost_mod$C14, sumCost_mod$dens + sumCost_mod$err, col = 'black', lty = 2)
  #lines(dister_spline$C14, abs(dister_spline$dens - sumCost_mod$dens), col = "blue")
  legend('topright', legend = c("Data", "Fit"), col = c('black', 'red'), lwd = 2, lty = c(1,1), cex = 0.8)
  
  print((sum(dister_spline$dens - sumCost_mod$dens)^2)*10^9)
  print(pars)

  return(dister_spline)
}

sumCost = data.frame(sumCost)
sumCost %>% 
  dplyr::mutate(err = ifelse(C14 > 1, (0.001) * 10^10, 1)) %>% #View()
  dplyr::mutate(dens = (dens + 1) * 10^10) -> sumCost_mod
  #dplyr::mutate(dens = ifelse(min(dens, na.rm = TRUE) != 0.1, dens + 0.1 , dens)) %>% View()# sumCost
scost_p <- function(pars){
  modelOutput=sfunc_p(pars, yr_obs)
  cost = modCost(model = modelOutput, obs = sumCost_mod, x = "C14", err = "err")
  return(cost)
}
#scost(inipars)


###### Fit the model

inipars <- c(0.1, 0.01, 0.001, 0.1, 0.1, 0.1, 0.99)#, 15)#, 0.5)
lowerBound = c(0, 0, 0, 0, 0, 0, 0)#, 0, 0)#, a21 = 1/365)
upperBound = c(1, 1, 1,1,1,1,1)#, 50, 1)#, a21 = 1)

par(mfrow = c(1,1))

frun <- sfunc_p(inipars)
plot(frun, type = 'l')
lines(sumCost_mod, col = 'red')
frun %>%
  full_join(sumCost_mod, by = 'C14') %>%
  dplyr::mutate(dens.x = coalesce(dens.x, 0)) %>%
  dplyr::mutate(dens.y = coalesce(dens.y, 0)) %>%
  dplyr::mutate(err = abs(dens.x - dens.y)^2) -> modacc
sum(modacc$err, na.rm = TRUE)
lines(modacc$C14, modacc$err, col = 'blue')

```


```{r Fit the model!}


inipars = c(0.4, 0.01, 0.001, 0.1, 0.1, 0.1, 0.1)
#inipars = c(0.11773000, 0.00465890, 0.00237904, 0.05915200, 0.06888068, 0.08403800, 0.96297600)
inipars[1] = 0.4
lowerBound = c(0, 0, 0, 0, 0, 0, 0)#, 0, 0)#, a21 = 1/365)
upperBound = c(1, 0.5, 0.1, 1, 1, 1, 1)#, 50, 1)#, a21 = 1)

start = -15000
yr_obs = 2004

t1 <- Sys.time()
sfit <- modFit(f = scost_p, p=inipars, upper = upperBound, lower = lowerBound, method = 'Nelder-Mead')#, control = c(numiter = 200, verbose = TRUE))
Sys.time() - t1

frun <- sfunc_p(sfit$par)
plot(frun, type = 'l')
lines(sumCost_mod, col = 'red')


```

```{r TT and SA}

deez <- c(.400000000, 0.004658900, 0.003191681, 0.059152000, 0.068880680, 0.084038000, 0.962976000)

 A = matrix(
    c(-deez[1] %>% as.double(), deez[2] * deez[5],          0, 
      deez[1]*deez[4],          -deez[2] %>% as.double(),   deez[3] * deez[7],
      0,                        deez[2] * deez[6],          -deez[3] %>% as.double()),
    nrow = 3,
    ncol = 3,
    byrow = T
  )

  U = matrix(c(inputs, 0, 0),
             nrow = 3,
             ncol = 1,
             byrow = T)
  
  TTz <- transitTime(A, U, q = c(0.25, 0.5, 0.75))
  SAz <- systemAge(A, U, q = c(0.25, 0.5, 0.75))
  
  paste("TT mean", TTz$meanTransitTime, "TT 25, 50, 75:", TTz$quantiles)
  paste("SA mean", SAz$meanSystemAge, "SA 25, 50, 75:", SAz$quantilesSystemAge)
  
```

```{r TT and SA from fit, for defense talk}

fitz = c( 0.231515026, 0.005114776, 0.002185075, 0.031800627, 0.101057592, 0.089530446, 0.973787633)

 A = matrix(
    c(-fitz[1] %>% as.double(), fitz[2] * fitz[5],          0, 
      fitz[1]*fitz[4],          -fitz[2] %>% as.double(),   fitz[3] * fitz[7],
      0,                        fitz[2] * fitz[6],          -fitz[3] %>% as.double()),
    nrow = 3,
    ncol = 3,
    byrow = T
  )

  U = matrix(c(inputs, 0, 0),
             nrow = 3,
             ncol = 1,
             byrow = T)
  
  TTz <- transitTime(A, U, q = c(0.01, 0.5, 0.95, .96, .97, .98, .99), a=seq(0, 50))
  SAz <- systemAge(A, U, q = c(0.05, 0.5, 0.95), a = seq(0,800))
  
  paste("TT mean", TTz$meanTransitTime, "TT 25, 50, 95:", TTz$quantiles)
  paste("SA mean", SAz$meanSystemAge, "SA 25, 50, 95:", SAz$quantilesSystemAge)
  
  plot(TTz$transitTimeDensity, type = 'l')
  abline(,,0)
  
  plot(SAz$systemAgeDensity, type = 'l')
  abline(,,0)
```

```{r Synthesis Hypothetical}

p1mod = OnepModel14(t = seq(start, 2022),
                    k = 1/600,
                    C0 = 100,
                    F0_Delta14C = -100,
                    In = 10,
                    inputFc = C14_NH %>%  dplyr::filter(Year.AD > start - 100)
                    )

tail(getF14C(p1mod))

p2mod = TwopSeriesModel14(t = seq(start, 2022),
                    ks = c(1/10, 1/900), 
                    C0 = c(100, 100),
                    a21 = 1/10 * 0.025,
                    F0_Delta14C = -100,
                    In = 10,
                    inputFc = C14_NH %>%  dplyr::filter(Year.AD > start - 100),
                    #gam = 0.7
                    )

tail(getF14C(p2mod))

p2.2mod = TwopSeriesModel14(t = seq(start, 2022),
                    ks = c(1/200, 1/500), 
                    C0 = c(100, 100),
                    a21 = 1/200 * 0.99,
                    F0_Delta14C = -100,
                    In = 10,
                    inputFc = C14_NH %>%  dplyr::filter(Year.AD > start - 100),
                    #gam = 0.7
                    )

tail(getF14C(p2.2mod))

A = matrix(c(-1/10, 1/10 * 0.25, 0, -1/900), ncol = 2, nrow = 2)

p2TT = transitTime(A = A, u = matrix(c(10, 0), ncol = 1), a = seq(0, 600))

A = matrix(c(-1/200, 1/200 * 0.99, 0, -1/500), ncol = 2, nrow = 2)

p2.2TT = transitTime(A = A, u = matrix(c(10, 0), ncol = 1), a = seq(0, 600))

print(p2TT$meanTransitTime)
print(p2.2TT$meanTransitTime)

print(p2TT$quantiles)
print(p2.2TT$quantiles)

data.frame(dens = p2.2TT$transitTimeDensity) %>% 
  dplyr::mutate(Model = "10 / 900") %>% 
  dplyr::mutate(Time = seq(0, 600)) %>% #glimpse()
  bind_rows( data.frame(dens = p2TT$transitTimeDensity, Model = "200 / 500", Time = seq(0,600))) %>% #glimpse()
  ggplot(aes(x = Time, y = dens, color = Model)) + geom_line(size = 2) +
  theme_bw() + 
  theme(
    axis.text = element_text(size = 12), 
    axis.title = element_text(size = 13),
    legend.text = element_text(size = 12),
    legend.title = element_text(size = 13),
    panel.grid = element_blank()
  ) + xlab("Transit Time (years)") +
  ylab("Density") + 
  geom_vline(xintercept = p2TT$quantiles[2], linetype = 2, size = 1.2, color = 'forestgreen') +
  geom_vline(xintercept = p2.2TT$quantiles[2], linetype = 2, size = 1.2, color = 'purple2') +
  scale_color_manual(values = c("forestgreen", "purple2"))
  
data.frame(year = seq(start, 2022), getF14(p2mod), Model = "10 / 900") %>% 
  bind_rows( data.frame(year = seq(start, 2022), getF14(p2.2mod), Model = "200 / 500")) %>% #glimpse() 
  rename(`Pool 1` = X1, `Pool 2` = X2) %>% #glimpse()
  tidyr::pivot_longer(cols = c(`Pool 1`, `Pool 2`), names_to = 'Pool', values_to = 'C14') %>% 
  bind_rows( data.frame(year = seq(start, 2022), Model = '10 / 900', C14 = getF14C(p2mod),  Pool = "System")) %>% #glimpse()
  bind_rows( data.frame(year = seq(start, 2022), Model = '200 / 500', C14 = getF14C(p2.2mod),  Pool = "System")) %>%
  bind_rows( data.frame(year = C14_NH %>%  dplyr::filter(Year.AD > start - 100) %>% .[,1], 
                        Model = "Atmosphere", C14 = C14_NH %>%  dplyr::filter(Year.AD > start - 100) %>% .[,2], 
                        Pool = "Atmosphere")) %>% #glimpse()
  ggplot(aes(x = year, y = C14, color = Model, linetype = Pool)) + 
    geom_line(size = 1.2) +
    theme_bw() +
    scale_linetype_manual(values = c(1,2,3,1)) +
    scale_color_manual(values = c("forestgreen", "purple2", "black")) +
    xlim(1950, 2022) + ylim(-125, 850) +
    theme(
          axis.title = element_text(size = 13),
          axis.text = element_text(size = 12),
          legend.text = element_text(size = 12),
          legend.title = element_text(size = 13)) +
    ylab( expression(paste(Delta^{14}, "C"))) +
    xlab("Year")



#### Introduction example

A = matrix(c(-0.2,  0.1,0, -0.01), ncol = 2)
tz <- transitTime(A, u = c(1,0), a = seq(1,200))


data.frame(tz$transitTimeDensity) %>% 
ggplot(aes(x = seq(1, 200), y = tz.transitTimeDensity, color = "TT")) + geom_line(size = 2, color = 'steelblue4')+ 
  theme_bw() + 
  theme(
      axis.title = element_text(size = 13),
      axis.text = element_text(size = 12),
      legend.text = element_text(size = 12),
      legend.title = element_text(size = 13),
      panel.grid = element_blank()) +
  xlab("Transit Time (years)") + ylab("Density") + 
  geom_vline(aes(xintercept = c(55)), linetype = 2, color = 'steelblue1', size = 1.2) +
  geom_vline(aes(xintercept = c(12)), linetype = 3, color = 'steelblue3', size = 1.2)
  

```



```{r NZ dists}
library(SoilR)
library(dplyr)
library(questionr)

p6181 <- c(0.181, 0.0197, 0.242)
p01 <- c(0.132, 0.0107, 0.1090)

ph61 <- c(.294, .0134, .148)
ph01 <- c(0.181, .00759, .153)

par(mfrow = c(3,2))
par(mar = c(2.0, 4, 2.0, 0.4)) 

for(t in c("dry", "high")){
    for(yr_obs in c(2009)){
    
      if(t == "dry"){
      if(yr_obs < 1992){
    A <- matrix(c(
      -p6181[1], p6181[1] * p6181[3], 0, -p6181[2]
    ), nrow = 2, ncol = 2)
    
    } else {
    A <- matrix(c(
      -p01[1], p01[1] * p01[3], 0, -p01[2]
    ), nrow = 2, ncol = 2)
    }
      } else {
          if(yr_obs < 1992){
    A <- matrix(c(
      -ph61[1], ph61[1] * ph61[3], 0, -ph61[2]
      ), nrow = 2, ncol = 2)
    
    } else {
    A <- matrix(c(
      -ph01[1], ph01[1] * ph01[3], 0, -ph01[2]
        ), nrow = 2, ncol = 2)
    }
      }
  
  U = matrix(c(10, 0), ncol = 1)
  
    DrysysW1 <- SystemRDC(
    A = A,
    u = U,
    nyears = 2000,
    yrobs = yr_obs,
    C14atm = C14_NH$Delta.14C,
    C14YearAD = C14_NH$Year.AD + lag
  )

  DrysyshistW1 <- C14hist(
    D14C = DrysysW1$D14C,
    Mass = DrysysW1$Mass / sum(DrysysW1$Mass, na.rm=TRUE),
    interval = ranger
  )


  Drydister = stats::density(DrysysW1$D14C, weights = abs(DrysysW1$Mass / sum(DrysysW1$Mass, na.rm=TRUE)), from = -1000, to = 1000, n = 1001)

  wmean = wtd.mean(DrysysW1$D14C, abs(DrysysW1$Mass / sum(DrysysW1$Mass, na.rm=TRUE)))
  
  spline(Drydister$x, Drydister$y, xout = seq(-1000, 1000, length.out = 1001)) %>% #glimpse()
    data.frame(.) %>%
    dplyr::mutate(C14 = x) %>% dplyr::mutate(dens = y) %>%
    select(C14, dens) -> Drydister_spline
  
  plot(Drydister_spline, xlim = c(-150, 850), type = 'l', main = yr_obs, xlab = "", ylab = "Density", ylim = c(0, 0.036), lwd = 2, cex.lab = 1.4, cex.axis = 1.5, cex.main=2)
  abline(,,,wmean, col = 'brown3', lty = 2, lwd = 2)
  

}
}

```




```{r Dist Function with rampedpyrox inputs, echo = FALSE}

FmEaDist <- function(sample, ramp, bulkFm = bulkFm, FmTemp = FmTemp, dfn = 3, reso = 0.1, mp_temps = NA, all.plots = FALSE, p_dir){
  library(SoilR)
  library(dplyr)
  library(tidyr)
  library(splines2)
  library(splines)
  library(zoo)
  library(DescTools)
  library(ggplot2)
  library(plotrix)
  library(weights)
  library(mpspline2)
  library(ISRaD)
  library(grid)
  library(gridExtra)
  library(readxl)
  library(FME)

  #frun

  if(sample == "Int. PM + SRO"){
  ### Specific AN_wf data
  ramp = read.csv('/Users/shane/14Constraint Dropbox/Shane Stoner/IMPRS/ThermalAnalysis/Ch3/Thermograms/FinalThermosAll/PyrOx/ANwf/ANwf MOM_ANwf MOM_p_tot.csv', header = F)
  # bulkFm = filter(isod, Sample.Name.N == "Int. PM + SRO")[,'Fm']
  FmTemp = c(120.9590015,
             136.6688015,
             148.0553961,
             165.7577982,
             189.7287554)
  mp_temps = data.frame(
    Tlow = c(50, 121, 137, 148, 165),
    Thigh = c(121, 137, 148, 165, 400)
  )


  ramp <- data.frame(E = seq(50, 400, length.out = 400),
                     P = ramp[,1])
  #colnames(ramp)[2] <- "P"
  # len_ramp <- which(ramp$E == 400)

  ################### All the code to get weighted Fm from Ea distributions of thermal fractions

  setwd('/Users/shane/14Constraint Dropbox/Shane Stoner/IMPRS/ThermalAnalysis/Ch3/Thermograms/FinalThermosAll/PyrOx/ANwf')

  f1 <- read.csv('ANwf MOM_ANwf MOM_p_frac1.csv', header = F)
  f2 <- read.csv('ANwf MOM_ANwf MOM_p_frac2.csv', header = F)
  f3 <- read.csv('ANwf MOM_ANwf MOM_p_frac3.csv', header = F)
  f4 <- read.csv('ANwf MOM_ANwf MOM_p_frac4.csv', header = F)
  f5 <- read.csv('ANwf MOM_ANwf MOM_p_frac5.csv', header = F)

  bulkFm = filter(isod, Sample.Name.N == "Int. PM + SRO")[,'Fm']
  }

  if(sample == "Felsic PM + CO"){
  #### Specific GRwf data

  ramp = read.csv('/Users/shane/14Constraint Dropbox/Shane Stoner/IMPRS/ThermalAnalysis/Ch3/Thermograms/FinalThermosAll/PyrOx/GRwf/GRwf MOM_GRwf MOM_p_tot.csv', header = F)
  bulkFm = filter(isod, Sample.Name.N == "Felsic PM + CO")[,'Fm']
  FmTemp = c(120.9590015,
             136.6688015,
             148.0553961,
             165.7577982,
             189.7287554)
  mp_temps = data.frame(
    Tlow = c(50, 121, 137, 148, 165),
    Thigh = c(121, 137, 148, 165, 400)
  )


  ramp <- data.frame(E = seq(50, 400, length.out = 400),
                     P = ramp)
  colnames(ramp)[2] <- "P"
  len_ramp <- which(ramp$E == 400)

  ################### All the code to get weighted Fm from Ea distributions of thermal fractions

  setwd('/Users/shane/14Constraint Dropbox/Shane Stoner/IMPRS/ThermalAnalysis/Ch3/Thermograms/FinalThermosAll/PyrOx/GRwf')

  f1 <- read.csv('GRwf MOM_GRwf MOM_p_frac1.csv', header = F)
  f2 <- read.csv('GRwf MOM_GRwf MOM_p_frac2.csv', header = F)
  f3 <- read.csv('GRwf MOM_GRwf MOM_p_frac3.csv', header = F)
  f4 <- read.csv('GRwf MOM_GRwf MOM_p_frac4.csv', header = F)
  f5 <- read.csv('GRwf MOM_GRwf MOM_p_frac5.csv', header = F)

  bulkFm = filter(isod, Sample.Name.N == "Felsic PM + CO")[,'Fm']
  }
  plot(ramp$E, f1$V1, type = 'l', col = 1, ylim = c(0, 0.05))
  lines(ramp$E, f2$V1, col = '2')
  lines(ramp$E, f3$V1, col = '3')
  lines(ramp$E, f4$V1, col = '4')
  lines(ramp$E, f5$V1, col = '5')

  f1$E <- ramp$E
  f1$Fm <- bulkFm[1]
  f1$wtFm <- f1$V1 * f1$Fm

  f2$E <- ramp$E
  f2$Fm <- bulkFm[2]
  f2$wtFm <- f2$V1 * f2$Fm

  f3$E <- ramp$E
  f3$Fm <- bulkFm[3]
  f3$wtFm <- f3$V1 * f3$Fm

  f4$E <- ramp$E
  f4$Fm <- bulkFm[4]
  f4$wtFm <- f4$V1 * f4$Fm

  f5$E <- ramp$E
  f5$Fm <- bulkFm[5]
  f5$wtFm <- f5$V1 * f5$Fm

  data.frame(ramp$E,
             f1$wtFm,
             f2$wtFm,
             f3$wtFm,
             f4$wtFm,
             f5$wtFm) %>%
    dplyr::group_by(ramp.E) %>%
    dplyr::mutate(weights = sum(f1.wtFm, f2.wtFm, f3.wtFm, f4.wtFm, f5.wtFm)) %>%
    dplyr::mutate(wtd.Fm1 = (f1.wtFm / weights) * bulkFm[1]) %>% #glimpse()
    dplyr::mutate(wtd.Fm2 = (f2.wtFm / weights) * bulkFm[2]) %>%
    dplyr::mutate(wtd.Fm3 = (f3.wtFm / weights) * bulkFm[3]) %>%
    dplyr::mutate(wtd.Fm4 = (f4.wtFm / weights) * bulkFm[4]) %>%
    dplyr::mutate(wtd.Fm5 = (f5.wtFm / weights) * bulkFm[5]) %>% #glimpse()
    #dplyr::mutate(SumFm = sum(wtd.Fm1, wtd.Fm2, wtd.Fm3, wtd.Fm4, wtd.Fm5)) %>% #glimpse()
    #select(ramp.E, SumFm) %>%
    dplyr::mutate(SumFm = sum(wtd.Fm1, wtd.Fm2, wtd.Fm3, wtd.Fm4, wtd.Fm5))%>%
    select(wtd.Fm1, wtd.Fm2, wtd.Fm3, wtd.Fm4, wtd.Fm5, SumFm) %>%
    gather(key = E, value = weight, -ramp.E) %>% #View()
    ggplot(aes(x = ramp.E, y = weight, col = E)) + geom_line(size = 1.2) + theme_bw()# -> sumFmplot

  data.frame(ramp$E,
             f1$wtFm,
             f2$wtFm,
             f3$wtFm,
             f4$wtFm,
             f5$wtFm) %>%
    dplyr::group_by(ramp.E) %>%
    dplyr::mutate(weights = sum(f1.wtFm, f2.wtFm, f3.wtFm, f4.wtFm, f5.wtFm)) %>%
    dplyr::mutate(wtd.Fm1 = (f1.wtFm / weights) * bulkFm[1]) %>% #glimpse()
    dplyr::mutate(wtd.Fm2 = (f2.wtFm / weights) * bulkFm[2]) %>%
    dplyr::mutate(wtd.Fm3 = (f3.wtFm / weights) * bulkFm[3]) %>%
    dplyr::mutate(wtd.Fm4 = (f4.wtFm / weights) * bulkFm[4]) %>%
    dplyr::mutate(wtd.Fm5 = (f5.wtFm / weights) * bulkFm[5]) %>% #glimpse()
    dplyr::mutate(SumFm = sum(wtd.Fm1, wtd.Fm2, wtd.Fm3, wtd.Fm4, wtd.Fm5))%>%
    dplyr::select(ramp.E, SumFm) %>% data.frame -> sumFm
  #select(ramp.E, SumFm) %>% ggplot() +geom_line(aes(x = ramp.E, y = SumFm)) + theme_bw()
  na.spline(sumFm, x = sumFm$ramp.E, xout = ht) %>% data.frame() -> sumFm


  plot(rsp, type = 'l', yaxt = 'n')
  lines(ramp$E, f1$V1, col = 'orange')
  lines(ramp$E, f2$V1, col = '2')
  lines(ramp$E, f3$V1, col = '3')
  lines(ramp$E, f4$V1, col = '4')
  lines(ramp$E, f5$V1, col = '5')
  par(new = T)
  plot(sumFm, type = 'l', col = 'red', lwd = 2, lty = 2)


  ###############

  ### Grab only relevant data with new RPO smoothing outputs
  #ramp <- ramp[1:len_ramp,]
  #ramp$CO2_prop = ramp$P / max(ramp$P, na.rm = TRUE)

  par(mfrow = c(1,1))
  ###Thermogram
  #Temperature ramp, with intervals for interpolation = reso (default = 0.1)
  ht = seq(50, 400, by = reso)
  rsp <- spline(ramp$E, ramp$P, xout = ht)

  ### Radiocarbon
  #B spline
  summary(B_fm1 <- lm(bulkFm ~ bs(FmTemp)))
  #Natural cubic spline
  summary(NCub_fm <- lm(bulkFm ~ ns(FmTemp)))

  #Cubic Spline
  CubFit <- interpSpline(bulkFm ~ FmTemp)
  #Linear Interpolation
  FmTempl = c(100, FmTemp, max(ramp$E)) #Assuming flat 14C change past constraint points
  bulkFml = c(bulkFm[1], bulkFm, bulkFm[length(bulkFm)]) #Build out Fm vector to create flat lines
  Lfit <- approx(FmTempl, bulkFml, n = length(ht))
  #Mass Preserving Spline
  # Fitting mass-preserving spline all the way to the end of the data series weights the first and last fraction unnaturally,
  # so we'll find the temp where 1% & 99% of the C has been released and constrain there
  maxtemp <- max(ramp$E)

  frac1 = AUC(x = ramp$E, y = ramp$P, from = 50, to = mp_temps$Thigh[1], method = 'spline')#, subdivisions = 2000) / 1000
  tRange = seq(80, mp_temps$Thigh[1])
  a = 0
  for(i in tRange){
    if(a < frac1){
      a <- AUC(ramp$E, ramp$P, from = 100, to = i, method = 'spline', subdivisions = 500)
      temp1 = i
    }
  }

  frac99 =(AUC(ramp$E, ramp$P, from = mp_temps$Tlow[length(mp_temps$Tlow)], to = mp_temps$Thigh[length(mp_temps$Thigh)],
               method = 'spline', subdivisions = 2000)) - (AUC(ramp$E, ramp$P,
                                                               from = mp_temps$Tlow[length(mp_temps$Tlow)], to = mp_temps$Thigh[length(mp_temps$Thigh)],
                                                               method = 'spline', subdivisions = 2000) / 1000)
  tRange = seq(mp_temps$Tlow[length(mp_temps$Tlow)], to = mp_temps$Thigh[length(mp_temps$Thigh)])
  a = 0
  for(i in tRange){
    if(a < frac99){
      a <- AUC(ramp$E, ramp$P, from = mp_temps$Tlow[length(mp_temps$Tlow)], to = i, method = 'spline', subdivisions = 500)
      temp99 = i
    }
  }

  if(temp1 < 50) temp1 = 50
  if(temp99 > 400) temp99 = 400

  mp <- data.frame(Sample = "sample",
                   ltemp = c(temp1, mp_temps[,1][2:length(mp_temps[,1])]),
                   htemp = c(mp_temps[1:length(mp_temps[,2])-1,2], temp99),
                   bulkFm)

  # Old mp, with max and min as default (poor fit of 1st and last fractions with MPspline)
  # mp <- data.frame(Sample = "sample",
  #                  ltemp = c(100, mp_temps[,1][2:length(mp_temps[,1])]),
  #                  htemp = mp_temps[,2],
  #                  bulkFm)

  #Initialize dataframe
  frame_sp <- data.frame(ht, ht, ht, ht, ht, ht, ht, ht)
  colnames(frame_sp) <- c('Temp', 'Area', 'B_Fm', 'Cub_Fm', "L_Fm", "NCub_Fm", "MPS_Fm", "Ea_Fm")
  #Calculate total area under curve
  totAUC <- AUC(ht, rsp$y, method = 'spline', subdivisions = length(ht))

  Area <- ht
  n = 1
  cond = c(rep(TRUE, length(ht)-1), FALSE)
  for(t in ht){
    if(cond[n]){
      Area[n] <- AUC(ht, rsp$y, from = t, to = ht[n+1], method = 'spline') / totAUC
    } else {
      Area[n] <- AUC(ht, rsp$y, from = t, to = ht[n], method = 'spline') / totAUC
    }

    #frame_sp$Cub_Fm[n] <- predict(CubFit, t)$y
    #frame_sp$L_Fm[n] <- Lfit$y[n]
    n = n+1
    if(n %% 2000 == 0) print(paste("Interpolation", round(n/length(ht) * 100, 1), "percent finished."))
  }

  frame_sp$Area <- Area

  #frame_sp$Area[length(frame_sp$Area)] = 0
  frame_sp$Cub_Fm <- spline(y = bulkFm, x= FmTemp, method = 'fmm', xout = frame_sp$Temp)$y #Doesn't make much sense for extrapolation but here it is
  frame_sp$L_Fm <- Lfit$y
  frame_sp$B_Fm = predict(B_fm1, data.frame(FmTemp=frame_sp$Temp)) #B spline fit
  #frame_sp$NCub_Fm = predict(NCub_fm, data.frame(FmTemp=frame_sp$Temp)) #Natural Cubic spline fit
  frame_sp$NCub_Fm = spline(y = bulkFm, x= FmTemp, method = 'natural', xout = frame_sp$Temp)$y

  # mpspline can only use integers, so we'll fit a finer spline to it
  mp.sp <- mpspline(mp, d = seq(50, 400))
  #frame_sp$MPS_Fm = approx(seq(100,len_ramp), mp.sp$sample$est_dcm, xout = ht)$y
  #frame_sp$MPS_Fm <- zoo::na.fill(frame_sp$MPS_Fm, fill = frame_sp$MPS_Fm[101]) ### Fill 99-100 with 100-101 values

  frame_sp$MPS_Fm <- na.approx(mp.sp$sample$est_1cm, xout = seq(50, 400,by=reso), rule = 2)

  #### And the new activation energy-based method
  frame_sp$Ea_Fm = sumFm$SumFm

  # plot(seq(1,len_ramp), mp.sp$sample$est_1cm, type = 'l', lwd =3)
  # lines(frame_sp$Temp, frame_sp$MPS_Fm, lwd = 2, col = 'red')

  par(mfrow = c(1,1))

  #Plot 14C interpolations and thermograms
  plot(frame_sp$Temp, frame_sp$Area, type = 'l', lwd = 3, col = 'steelblue',
       xlab = 'Temperature', ylab = 'Density',
       main = sample, xlim = c(50, 350))
  par(new = T)
  plot(frame_sp$Temp, frame_sp$B_Fm, type = 'l', lwd = 1.5, col = "coral3", yaxt = 'n',
       #ylab = '', xlab = '', ylim = c(0.8, 1.03), xlim = c(90, 250))
       ylim = c(max(0.1, min(frame_sp[,2:6])), min(1.2, max(frame_sp[,2:6]))),xlim = c(50, 350))
  lines(frame_sp$Temp, frame_sp$Cub_Fm, col = 'cyan4', lwd = 1.5)
  lines(Lfit, col = 'purple', lwd = 1.5)
  lines(frame_sp$Temp, frame_sp$NCub_Fm, col = 'darkgreen', lwd = 1.5)
  lines(frame_sp$Temp, frame_sp$MPS_Fm, col = "black", lty = 2, lwd =1.5)
  lines(frame_sp$Temp, frame_sp$Ea_Fm, col = "orange", lty = 1, lwd =2.5)
  points(FmTemp, bulkFm, pch = 21, bg = 'blue')
  axis(side = 4)
  mtext(side = 4, 'Fm')
  legend('topright', legend = c('B Spline', 'Cubic Spline', 'Linear', "Nat. Cubic", "MP Spline", "Ea Sum Sp.", 'Thermogram',"14C Data"),
         lty = c(1,1,1,1,1,2,1,NA), col = c('coral3', 'cyan4', 'purple','darkgreen', 'black', "orange",'steelblue','black'),
         #bg = c(1,1,1),
         pch = c(NA, NA,NA,NA,NA,NA, NA,21),
         lwd = 2, cex = 0.7)

  #Histograms for outputs
  par(mfrow = c(2,1))
  breaks <- seq(from = 0.0, to = 2, length.out = 1000)

  if(all.plots) hist(frame_sp$L_Fm, main ='Linear Interpolation, Unweighted', freq = FALSE)
  LinHist <- weighted.hist(frame_sp$L_Fm, frame_sp$Area, freq = FALSE, xlim = c(0.5, 1.5),
                           main = 'Linear Interpolation, Weighted', breaks = breaks, plot = ifelse(all.plots, TRUE, FALSE))

  if(all.plots) hist(frame_sp$B_Fm, main = 'B Spline, Unweighted', freq = FALSE)
  BHist <- weighted.hist(frame_sp$B_Fm, frame_sp$Area, freq= FALSE, xlim = c(0.5, 1.5),
                         main = 'B Spline, Weighted', breaks = breaks, plot = ifelse(all.plots, TRUE, FALSE))

  if(all.plots) hist(frame_sp$Cub_Fm, main ='Cubic Spline, Unweighted', freq = FALSE)
  CubHist <- weighted.hist(frame_sp$Cub_Fm, frame_sp$Area, freq = FALSE, xlim = c(0.5, 1.5),
                           main = 'Cubic Spline, Weighted', breaks = breaks, plot = ifelse(all.plots, TRUE, FALSE))

  if(all.plots) hist(frame_sp$NCub_Fm, main = 'Natural Cubic Spline, Unweighted', freq=FALSE)
  NCubHist <- weighted.hist(frame_sp$NCub_Fm, frame_sp$Area, freq = FALSE, xlim = c(0.5, 1.5),
                            main = 'Natural Cubic Spline, Weighted', breaks = breaks, plot = ifelse(all.plots, TRUE, FALSE))

  if(all.plots) hist(frame_sp$MPS_Fm, main = 'Mass-Preserving Spline, Unweighted', freq=FALSE)
  MPHist <- weighted.hist(frame_sp$MPS_Fm, frame_sp$Area, freq = FALSE, xlim = c(0.5, 1.5),
                          main = 'Mass-Preserving Spline, Weighted', breaks = breaks, plot = ifelse(all.plots, TRUE, FALSE))

  if(all.plots) hist(frame_sp$Ea_Fm, main = 'Activation Energy Sum Spline, Unweighted', freq=FALSE)
  EaHist <- weighted.hist(frame_sp$Ea_Fm, frame_sp$Area, freq = FALSE, xlim = c(0.5, 1.5),
                          main = 'Activation Energy Sum Spline, Weighted', breaks = breaks, plot = ifelse(all.plots, TRUE, FALSE))

  if(all.plots){
    par(mfrow = c(1,1))
    plot(ramp$E, ramp$P, type = 'l', lwd = 3, xlim = c(50, 250), main = paste(sample, ":: Mass-preserving spline fit"))
    par(new = T)
    plot(FmTemp, bulkFm, ylim = c(.6, 1.12), axes = F, ann = F, xlim = c(50, 250), pch = 16, col = 'steelblue',cex = 1.5)
    for(i in 1:6){
      x0v = mp_temps[,1][i]
      y0h = 0
      x1b = mp_temps[,2][i]
      y1b = mp[,4][i]
      if(i == 1 ){
        segments(x0 = x1b, y0 = y0h, x1 = x1b, y1 = y1b, col = 'brown2', lwd = 4)
        segments(x0 = 50, y0 = y1b, x1 = x1b, y1 = y1b, col = 'brown2', lwd = 4)
      } else {
        x0h = mp[,3][i-1]
        segments(x0 = x1b, y0 = y0h, x1 = x1b, y1 = y1b, col = 'brown2', lwd = 4)
        segments(x0 = x0h, y0 = y1b, x1 = x1b, y1 = y1b, col = 'brown2', lwd = 4)
        segments(x0 = x0h, y0 = y1b, x1 = x0v, y1 = y0h, col = 'brown2', lwd = 4)
      }
    }
    lines(frame_sp$Temp, frame_sp$MPS_Fm, lty = 2, lwd = 3, col = 'darkgreen')
  }

  ##Plot those distributions
  Cubstats <- c(wtd.quantile(frame_sp$Cub_Fm, weights = frame_sp$Area,
                             normwt = TRUE, probs = c(0.1, 0.25, 0.5, 0.75, 0.9)),
                wmean = wtd.mean(frame_sp$Cub_Fm, weight = frame_sp$Area))
  Linstats <- c(wtd.quantile(frame_sp$L_Fm, weights = frame_sp$Area,
                             normwt = TRUE, probs = c(0.1, 0.25, 0.5, 0.75, 0.9)),
                wmean = wtd.mean(frame_sp$L_Fm, weight = frame_sp$Area))
  Bstats <- c(wtd.quantile(frame_sp$B_Fm, weights = frame_sp$Area,
                           normwt = TRUE, probs = c(0.1, 0.25, 0.5, 0.75, 0.9)),
              wmean = wtd.mean(frame_sp$B_Fm, weight = frame_sp$Area))
  NCubstats <- c(wtd.quantile(frame_sp$NCub_Fm, weights = frame_sp$Area,
                              normwt = TRUE, probs = c(0.1, 0.25, 0.5, 0.75, 0.9)),
                 wmean = wtd.mean(frame_sp$NCub_Fm, weight = frame_sp$Area))
  MPstats <- c(wtd.quantile(frame_sp$MPS_Fm, weights = frame_sp$Area,
                            normwt = TRUE, probs = c(0.1, 0.25, 0.5, 0.75, 0.9)),
               wmean = wtd.mean(frame_sp$MPS_Fm, weight = frame_sp$Area))
  Eastats <- c(wtd.quantile(frame_sp$Ea_Fm, weights = frame_sp$Area,
                            normwt = TRUE, probs = c(0.1, 0.25, 0.5, 0.75, 0.9)),
               wmean = wtd.mean(frame_sp$Ea_Fm, weight = frame_sp$Area))

  xlim = c(max(min(Bstats, Linstats, Cubstats, NCubstats, MPstats, Eastats),0.5) - 0.015,
           min(max(Bstats, Linstats, Cubstats, NCubstats, MPstats, Eastats), 1.5) + 0.015)
  #Linear Interpolation
  colz = c('#feb24c','#fd8d3c','#fc4e2a','#e31a1c','#b10026','#4a1486',"black")
  if(all.plots){
    print(ggplot(data = frame_sp) +
            geom_vline(xintercept = Linstats, lty = 2) + theme_bw() +
            geom_freqpoly(bins = 200, aes(x = L_Fm, y=..density.., weight = Area),
                          colour="black", fill="white") +
            geom_density(aes(x = L_Fm, y=..density.., weight = abs(frame_sp$Area),fill="#FF6666"),alpha = 0.2) +
            xlim(xlim) +
            ggtitle(paste(sample, ':: Linear Spline Distribution')) + xlab('Fraction Modern') +
            geom_label(aes(x = Linstats, y = 0.7), data = data.frame(names(Linstats)), label =  names(Linstats), size = 2))

    #B Spline
    print(ggplot(data = frame_sp) +
            geom_vline(xintercept = Bstats, lty = 2) + theme_bw() +
            geom_freqpoly(bins = 200, aes(x = B_Fm, y=..density.., weight = Area),
                          colour="black", fill="white") +
            geom_density(aes(x = B_Fm,y=..density.., weight = abs(frame_sp$Area),fill="#FFFF66"),alpha = 0.2) +
            xlim(xlim) +
            ggtitle(paste(sample, ':: B Spline Distribution')) + xlab('Fraction Modern') +
            geom_label(aes(x = Bstats, y = 0.7), data = data.frame(names(Bstats)), label =  names(Bstats), size = 2))

    #Cubic Spline
    print(ggplot(data = frame_sp) +
            geom_vline(xintercept = Cubstats, lty = 2) + theme_bw() +
            geom_freqpoly(bins = 200, aes(x = Cub_Fm, y=..density.., weight = Area),
                          colour="black", fill="white") +
            geom_density(aes(x = Cub_Fm,y=..density.., weight = abs(frame_sp$Area),fill="#FF6666"),alpha = 0.2) +
            xlim(xlim) +
            ggtitle(paste(sample, ':: Cubic Spline Distribution')) + xlab('Fraction Modern') +
            geom_label(aes(x = Cubstats, y = 0.7), data = data.frame(names(Cubstats)), label =  names(Cubstats), size = 2))

    #Natural Cubic Spline
    print(ggplot(data = frame_sp) +
            geom_vline(xintercept = NCubstats, lty = 2) + theme_bw() +
            geom_freqpoly(bins = 200, aes(x = NCub_Fm, y=..density.., weight = Area),
                          colour="black", fill="white") +
            geom_density(aes(x = NCub_Fm,y=..density.., weight = abs(frame_sp$Area),fill="#FF6666"),alpha = 0.2) +
            xlim(xlim) + theme_bw() +
            ggtitle(paste(sample, ':: Natural Cubic Spline Distribution')) + xlab('Fraction Modern') +
            geom_label(aes(x = NCubstats, y = 0.7), data = data.frame(names(NCubstats)), label =  names(Cubstats), size = 2))

    #Mass-preserving Spline
    print(ggplot(data = frame_sp) +
            geom_vline(xintercept = MPstats, lty = 2) + theme_bw() +
            geom_freqpoly(bins = 200, aes(x = MPS_Fm, y=..density.., weight = Area),
                          colour="black", fill="white") +
            geom_density(aes(x = MPS_Fm,y=..density.., weight = abs(frame_sp$Area),fill="#FF6666"),alpha = 0.2) +
            xlim(xlim) + theme_bw() +
            ggtitle(paste(sample, ':: Mass-Preserving Spline Distribution')) + xlab('Fraction Modern') +
            geom_label(aes(x = MPstats, y = 0.7), data = data.frame(names(MPstats)), label =  names(MPstats), size = 2))

    #Activation Energy Sum Spline
    print(ggplot(data = frame_sp) +
            geom_vline(xintercept = Eastats, lty = 2) + theme_bw() +
            geom_freqpoly(bins = 200, aes(x = Ea_Fm, y=..density.., weight = Area),
                          colour="black", fill="white") +
            geom_density(aes(x = Ea_Fm, y=..density.., weight = abs(frame_sp$Area),fill="#FF6666"),alpha = 0.2) +
            xlim(xlim) + theme_bw() +
            ggtitle(paste(sample, ':: Activation Energy Sum Spline Distribution')) + xlab('Fraction Modern') +
            geom_label(aes(x = Eastats, y = 0.7), data = data.frame(names(Eastats)), label =  names(Eastats), size = 2))
  }
  #All splines overlain (Density)
  xlim = c(xlim[1] - 0.005, xlim[2] + 0.005)
  bins = 200

  print(ggplot(data=frame_sp) +
          geom_freqpoly(bins = bins, aes(x = L_Fm, y = ..density.., weight = abs(Area),color="#FF6666"),alpha = 1) +
          geom_freqpoly(bins = bins, aes(x = B_Fm, y = ..density.., weight = abs(Area),color="#FFFF66"),alpha = 1) +
          geom_freqpoly(bins = bins, aes(x = Cub_Fm, y = ..density.., weight = abs(Area),color="#FF66FF"),alpha = 1) +
          geom_freqpoly(bins = bins, aes(x = NCub_Fm, y = ..density.., weight = abs(Area),color="#6666FF"),alpha = 1) +
          geom_freqpoly(bins = bins, aes(x = MPS_Fm, y = ..density.., weight = abs(Area),color="steelblue2"),alpha = 1) +
          geom_freqpoly(bins = bins, aes(x = Ea_Fm, y = ..density.., weight = abs(Area),color="orange"),alpha = 1) +
          xlim(xlim) + theme_bw() +
          ggtitle(paste(sample, ':: Weighted Histogram Polygons')) +
          scale_color_discrete(name = "Fit", labels = c("Linear", "Cubic", "B Spline", "Nat. Cubic", "Mass-Preserving", "Act. Energy")))

  #All splines overlain (Histograms)
  # par(mfrow = c(1,1))
  # plot(FmTemp, bulkFm, pch = 21, bg = 'blue', ylab = 'Fm',
  #      ylim = c(0.5, max(bulkFm, frame_sp$B_Fm, frame_sp$Cub_Fm, frame_sp$L_Fm)),
  #      xlim = c(min(frame_sp$Temp), max(frame_sp$Temp)))
  # par(new = T)
  # plot(frame_sp$Temp, frame_sp$Area, type = 'l', lwd = 3, col = 'steelblue', xlab = '', ylab = '',
  #      main = sample, yaxt = 'n')
  # par(new = T)
  # plot(frame_sp$Temp, frame_sp$B_Fm, type = 'l', lwd = 1.5, col = 'coral', yaxt = 'n', ylab = '', xlab = '',
  #      ylim = c(0.5, max(bulkFm, frame_sp$B_Fm, frame_sp$Cub_Fm, frame_sp$L_Fm)))
  # lines(frame_sp$Temp, frame_sp$Cub_Fm, col = 'cyan4', lwd = 1.5)
  # lines(Lfit, col = 'purple', lwd = 1.5)
  # lines(frame_sp$Temp, frame_sp$NCub_Fm, col = 'darkgreen', lwd = 1.5)
  # lines(frame_sp$Temp, frame_sp$MPS_Fm, col = 'black', lty = 2, lwd = 1.5)
  # axis(side = 4)
  # mtext(side = 2, 'Fm')
  # legend('topright', legend = c('B Spline', 'Cubic Spline', 'Linear', "Nat. Cubic", "MP Spline", 'Thermogram',"14C Data"),
  #        lty = c(1,1,1,1,2,1,NA), col = c('coral', 'cyan4', 'purple','darkgreen', 'black', 'steelblue','black'),
  #        #bg = c(1,1,1),
  #        pch = c(NA, NA,NA,NA,NA, NA,21),
  #        lwd = 2, cex = 0.7)

  ### Compare stats against measured means
  convert_fm_d14c <- function(fm = NA, d14c = NA, obs_date_y, verbose = TRUE) {
    lambda <- 0.00012097
    if (is.na(d14c)) {
      if (verbose) {
        message("calculating ", "\u0394", "14C from fraction modern")
      }
      (fm * exp(lambda * (-obs_date_y + 1950)) - 1) * 1000
    } else if (is.na(fm)) {
      if (verbose) {
        message("calculating fraction modern from ", paste0("\u0394", "14C"))
      }
      ((d14c / 1000) + 1) / exp(lambda * (-obs_date_y + 1950))
    }
  }

  isod %>%
    dplyr::filter(Sample.Name.N == sample & !is.na(Bulk.14C)) %>% #glimpse()
    dplyr::select(Bulk.14C) %>% as.numeric() %>% #glimpse()
    convert_fm_d14c(d14c = ., obs_date_y = 2019) %>% as.numeric() -> measFm

  q <- data.frame(
    round(measFm, 4),
    round(Linstats[6] - measFm, 4),
    round(Cubstats[6] - measFm, 4),
    round(NCubstats[6] - measFm, 4),
    round(Bstats[6] - measFm, 4),
    round(MPstats[6] - measFm, 4),
    round(Eastats[6] - measFm, 4)
  )

  colnames(q) <- c("Measured", "Linear", "Cubic", "Nat. Cubic", "B Spline", "MP Spline", "Ea Spline")
  plot.new()
  pvp = viewport(x = .5, y = .3)
  pushViewport(pvp)
  grid.text("Difference in mean Fm", x=.5, y = .8)
  grid.table(q)
  #grid.text(samplesize, x=.9, y = .55)


  print(frame_sp %>%
    select(-Temp) %>%
    gather(key = fit, value = Fm, -Area) %>%
    ggplot(aes(x = Fm, y = ..density.., color = fit, weight = abs(Area))) + geom_density(size = 1, alpha = 0.5) +
    xlim(xlim) + theme_bw())

  # print(ggplot(data=frame_sp) +
  #         geom_density(aes(x = L_Fm, y = ..density.., weight = abs(Area), color="#FF6666"), alpha = 0.5, lwd =1.2) +
  #         geom_density(aes(x = B_Fm, y = ..density.., weight = abs(Area), color="#FFFF66"), alpha = 0.5, lwd =1.2) +
  #         geom_density(aes(x = Cub_Fm, y = ..density.., weight = abs(Area), color="#FF66FF"), alpha = 0.5, lwd = 1.2) +
  #         geom_density(aes(x = NCub_Fm, y = ..density.., weight = abs(Area)), color="#6666FF", alpha = 0.5, lwd = 1.2) +
  #         geom_density(aes(x = MPS_Fm, y = ..density.., weight = abs(Area)), color="steelblue2", alpha = 0.5, lwd = 1.2) +
  #         geom_density(aes(x = Ea_Fm, y = ..density.., weight = abs(Area)), color="orange", alpha = 0.5, lwd = 1.2) +
  #         xlim(xlim) + xlab("Fm") + theme_bw() +
  #         ggtitle(paste(sample, ':: Weighted Densities')) +
  #         scale_color_discrete(name = "Fit", labels = c("Linear", "Cubic", "B Spline", "Nat. Cubic", "MP Spline", "Ea Spline")))
  #
  # print("Linear, B, Cubic")
  # print(Linstats)
  # print(Bstats)
  # print(Cubstats)
  return(list(data.frame(sample, Linstats, Bstats, Cubstats, NCubstats, MPstats),
              data.frame(sample, MidFm = breaks,
                         Lin = c(0,LinHist$density),
                         B = c(0,BHist$density),
                         Cub = c(0,CubHist$density),
                         NCub = c(0,NCubHist$density),
                         MPS = c(0,MPHist$density),
                         Ea = c(0,EaHist$density),
                         LinDens = density(LinHist$density, n = 1000)$y,
                         BDens = density(BHist$density, n = 1000)$y,
                         CubDens = density(CubHist$density, n = 1000)$y,
                         NCubDens = density(NCubHist$density, n = 1000)$y,
                         MPSDens = density(MPHist$density, n = 1000)$y,
                         EaDens = density(EaHist$density, n = 1000)$y
              ),
              data.frame(Area = frame_sp$Area,
                         L_Fm = frame_sp$L_Fm,
                         B_Fm = frame_sp$B_Fm,
                         Cub_Fm = frame_sp$Cub_Fm,
                         NCub_Fm = frame_sp$NCub_Fm,
                         MPS_Fm = frame_sp$MPS_Fm,
                         Ea_Fm = frame_sp$Ea_Fm)))
}

```

```{r}

zz <- FmEaDist(sample = "Int. PM + SRO", ramp = ramp)

# plot(zz[[2]]$)

ggplot(zz[[3]]) + geom_density(aes(Ea_Fm, y = ..density.., weight = abs(Area))) + xlim(0.5, 1.5)

```


## Including Plots

You can also embed plots, for example:

```{r BUlk Wetzstein Soil}



```

Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
